#!/bin/bash

# source this script to provide read-access to global config variables exported from your lua script

# Copyright (c) 2016 DarkCaster, MIT License, see https://github.com/DarkCaster/Linux-Helper-Tools for more info
# see https://github.com/DarkCaster/Linux-Helper-Tools/tree/master/BashLuaHelper for usage info

#TODO: store all generated stuff not in temporary plain-text files, but somewhere else

lua_helper_dir="$( cd "$( dirname "$0" )" && pwd )"

lua_cache_dir=`mktemp -d -t lua-helper-XXXXXXXX`
lua_startup_params=""
lua_result_name="cfg"
lua_export_list_name="cfg_list"

lua_add_param() {
 lua_startup_params=`echo -n "$lua_startup_params $@"`
}

lua_helper_log_error () {
 >&2 echo "$@"
}

lua_helper_teardown () {
 rm -rf "$lua_cache_dir"
 true
}

lua_helper_showusage () {
 lua_helper_log_error ""
 lua_helper_log_error "usage: . lua-helper.sh.in <main lua script> <options>"
 lua_helper_log_error ""
 lua_helper_log_error "mandatory options:"
 lua_helper_log_error "-e <name> global variable from lua script to export (if variable is a table, this will export all fields recursively)"
 lua_helper_log_error " you can pass multiple -e options"
 lua_helper_log_error ""
 lua_helper_log_error "other options:"
 lua_helper_log_error "-b <pre script> lua script, that will be executed in context of loader.lua, just before main script"
 lua_helper_log_error "-a <post script> lua script, that will be executed in context of loader.lua, after main script."
 lua_helper_log_error " this script will have access to all global variables and context changes that main script has made"
 lua_helper_log_error "-o <string> add extra user string to loader.extra table (indexed by number starting from 1). multiple options can be selected"
 lua_helper_log_error "-w <dir> non default work directory. will be stored at loader.workdir. by default, config file base directory will be used"
 lua_helper_log_error "-r <associative array name> name of associative array, that will contain all exported variables from lua script. by default will be used name \"cfg\""
 lua_helper_log_error "-l <variable name> custom variable name that will contain list (multiline) of all exported variables. by default will be used name \"cfg_list\""
 lua_helper_log_error "-h show this help"
 lua_helper_teardown
 exit 100
}

lua_helper_check_bad_chars () {
 local target="$1"
 local msg_pre="$2"
 # TODO: some regexp magic
 true
}

lua_config_script="$1"
test -z "$lua_config_script" && lua_helper_showusage
test ! -e "$lua_config_script" && lua_helper_log_error "main config file not found" && lua_helper_showusage
lua_config_script=`realpath "$lua_config_script"`
lua_workdir=`dirname $lua_config_script`
lua_add_param " -c \"$lua_config_script\""
lua_add_param " -t \"$lua_cache_dir\""
shift 1

lua_helper_parseopts () {
 local lua_exports=""
 local lua_pre_script=""
 local lua_post_script=""
 local optname
 while getopts ":e:b:a:o:w:r:l:h" optname
 do
  case "$optname" in
   "e")
     lua_helper_check_bad_chars "$OPTARG" "exported global variable"
     lua_exports="$lua_exports -e \"$OPTARG\""
   ;;
   "b")
     test ! -z "$lua_pre_script" && lua_helper_log_error "multiple -b options detected" && lua_helper_showusage
     lua_pre_script="$OPTARG"
     test ! -e "$lua_pre_script" && lua_helper_log_error "pre script not found" && lua_helper_showusage
     lua_add_param " -pre \"$lua_pre_script\""
   ;;
   "a")
     test ! -z "$lua_post_script" && lua_helper_log_error "multiple -a options detected" && lua_helper_showusage
     lua_post_script="$OPTARG"
     test ! -e "$lua_post_script" && lua_helper_log_error "post script not found" && lua_helper_showusage
     lua_add_param " -post \"$lua_post_script\""
   ;;
   "o")
     lua_add_param " -ext \"$OPTARG\""
   ;;
   "w")
     lua_workdir="$OPTARG"
   ;;
   "r")
     lua_helper_check_bad_chars "$OPTARG" "result associative array name"
     lua_result_name="$OPTARG"
   ;;
   "l")
     lua_helper_check_bad_chars "$OPTARG" "export list variable name"
     lua_export_list_name="$OPTARG"
   ;;
   "h")
     lua_helper_showusage
   ;;
   "?")
     lua_helper_log_error "Unknown option $OPTARG"
     lua_helper_showusage
   ;;
   ":")
     lua_helper_log_error "No argument given for option $OPTARG"
     lua_helper_showusage
   ;;
   *)
     # Should not occur
     lua_helper_log_error "Unknown error while processing options"
     lua_helper_showusage
   ;;
  esac
 done

 test -z "$lua_workdir" && lua_helper_log_error "workdir is empty string" && lua_helper_showusage
 lua_add_param " -w \"$lua_workdir\""
 test -z "$lua_exports" && lua_helper_log_error "you must select at least one variable to export from your lua script" && lua_helper_showusage
 lua_add_param "$lua_exports"
}

lua_helper_parseopts $@

echo "$lua_startup_params" | xargs lua "$lua_helper_dir/loader.lua"
if [ "$?" != "0" ]; then
 lua_helper_log_error "loader.lua script failed"
 lua_helper_teardown
 exit 1
fi

#create result associative array and fill it with global variables exported from lua config.
#see example.bash for usage details
declare -A "$lua_result_name"

lua_helper_fill_result () {
 while read target
 do
  lua_helper_check_bad_chars "$target" "filename with exported variable contents \"$target\""
  eval $lua_result_name'['$target']'='$(<"'"$lua_cache_dir/$target"'")'
 done < <(ls -1 "$lua_cache_dir")
}

lua_helper_fill_result

#create list (multiline variable) with all exported variables names
eval $lua_export_list_name'=`ls -1 "'"$lua_cache_dir"'"`'

lua_helper_teardown

#perform environment cleanup
unset -f lua_helper_fill_result
unset -f lua_helper_parseopts
unset -f lua_helper_check_bad_chars
unset -f lua_helper_showusage
unset -f lua_helper_teardown
unset -f lua_helper_log_error
unset -f lua_add_param
unset lua_helper_dir
unset lua_cache_dir
unset lua_startup_params
unset lua_result_name
unset lua_export_list_name
unset lua_config_script
unset lua_workdir

