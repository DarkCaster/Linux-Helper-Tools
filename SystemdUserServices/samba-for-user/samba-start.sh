#!/bin/sh
#

log () {
 local msg="$@"
 echo "$msg"
}

do_exit () {
 local code="$1"
 log "exiting with code $code"
 exit $code
}

thisuser=`id -u`
thisusername=`whoami`
authbind=""

if [ "zzz$thisuser" != "zzz0" ]; then
  authbind="`which authbind 2>/dev/null`"
  if [ "zzz$authbind" = "zzz" ]; then
    log "authbind binary is required to run samba server for regular user account!"
    do_exit 10
  fi
fi

smbd=""
smbd_test="`which smbd 2>/dev/null`"

if [ "zzz$smbd_test" = "zzz" ]; then
  log "Trying smbd binary at /usr/sbin/smbd"
  smbd="`which /usr/sbin/smbd 2>/dev/null`"
else
  smbd="$smbd_test"
fi

if [ "zzz$smbd" = "zzz" ]; then
  log "smbd binary is not found!"
  do_exit 9;
fi

global_in=""
shares_in=""

showusage () {
 echo "Usage: samba-start.sh [parameters] <shares.config.in>"
 echo "parameters:"
 echo "-g <global.config.in> - user addons to autogenerated global config"
 echo "-h - show help"
}

parseopts () {
 local optname
 while getopts ":g:h" optname
 do
  case "$optname" in
   "g")
     global_in="$OPTARG"
     if [ "zzz$global_in" = "zzz" ] || [ ! -f "$global_in" ]; then
       log "config.in file with global options is not exists!"
       showusage
       do_exit 8
     fi
   ;;
   "h")
    showusage
    do_exit 7
   ;;
   "?")
    log "Unknown option $OPTARG"
    showusage
    do_exit 6
   ;;
   ":")
    log "No argument given for option $OPTARG"
    showusage
    do_exit 5
   ;;
   *)
    # Should not occur
    log "Unknown error while processing options"
    showusage
    do_exit 4
   ;;
  esac
 done

eval "shares_in=\"\${$OPTIND}\""

if [ "zzz$shares_in" = "zzz" ] || [ ! -f "$shares_in" ]; then
 log "config.in file with user shares is not set or not exists!"
 showusage
 do_exit 3
fi
}

parseopts "$@"

check_pid () {
 local pid_file="$1"
 local cmd="$2"
 if [ ! -f "$pid_file" ]; then
  echo "s"
 else
  pid="`2>/dev/null head -1 \"$pid_file\"`"
  if [ "z$pid" = "z" ]; then
   echo "s"
  else
   check="`ps -u $thisusername -o pid --no-headers | awk '{print $1}' | grep -Fx \"$pid\" | wc -l`"
   if [ "z$check" = "z0" ]; then
    echo "s"
   else
    if [ "z$check" = "z1" ]; then
     check="`cat /proc/$pid/cmdline 2>/dev/null | cut -f1 -d ''`"
     if [ "z$check" = "z$cmd" ]; then
      echo "r"
     else
      echo "s"
     fi
    else
     echo "error"
    fi
   fi
  fi
 fi
}

workdir="/tmp/samba-service-for-$thisuser"

#check if we already started
if [ "`check_pid "$workdir/pids/smbd.pid" "$smbd"`" != "s" ]; then
  log "Samba is already running for this user! exiting."
  do_exit 2
fi

mkdir -p "$workdir"
chmod 700 "$workdir"

if [ "zzz$workdir" = "zzz" ]; then
  log "Failed to create workdir!"
  do_exit 1
fi

log "Samba's workdir is set to: $workdir"

config_final="$workdir/config.final"
config_auto="$workdir/config.auto"

mkdir -p "$workdir/cache"
mkdir -p "$workdir/lock"
mkdir -p "$workdir/pids"
mkdir -p "$workdir/private"
mkdir -p "$workdir/state"
mkdir -p "$workdir/ncalrpc"
mkdir -p "$workdir/logs"

echo "[global]" > "$config_auto"
#echo "allocation roundup size = 65535" >> "$config_auto"
echo "allow dns updates = disabled" >> "$config_auto"
echo "auth methods = guest sam" >> "$config_auto"
#echo "block size = 4096" >> "$config_auto"
echo "cache directory = $workdir/cache" >> "$config_auto"
echo "client lanman auth = no" >> "$config_auto"
echo "invalid users = root admin @root @admin" >> "$config_auto"
echo "keepalive = 60" >> "$config_auto"
echo "lock directory = $workdir/lock" >> "$config_auto"
echo "log file = $workdir/logs/mainlog" >> "$config_auto"
echo "log level = 2" >> "$config_auto"
echo "log writeable files on exit = yes" >> "$config_auto"
echo "syslog = 0" >> "$config_auto"
echo "max log size = 2048" >> "$config_auto"
#echo "max stat cache size = 1024" >> "$config_auto"
echo "multicast dns register = no" >> "$config_auto"
echo "pid directory = $workdir/pids" >> "$config_auto"
echo "private dir = $workdir/private" >> "$config_auto"
echo "state directory = $workdir/state" >> "$config_auto"
echo "ncalrpc dir =  $workdir/ncalrpc" >> "$config_auto"

if [ "zzz$global_in" != "zzz" ] && [ -f "$global_in" ]; then
  cat "$config_auto" "$global_in" "$shares_in" > "$config_final"
else
  cat "$config_auto" "$shares_in" > "$config_final"
fi

if [ "zzz$authbind" = "zzz" ]; then
  log "Starting samba daemon"
  "$smbd" --configfile="$config_final" --log-basename="$workdir/logs"
else
  log "Starting samba daemon with authbind"
  "$authbind" --deep "$smbd" --configfile="$config_final" --log-basename="$workdir/logs"
fi
do_exit 0
